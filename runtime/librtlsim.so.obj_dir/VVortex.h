// Verilated -*- C++ -*-
// DESCRIPTION: Verilator output: Primary model header
//
// This header should be included by all source files instantiating the design.
// The class here is then constructed to instantiate the design.
// See the Verilator manual for examples.

#ifndef VERILATED_VVORTEX_H_
#define VERILATED_VVORTEX_H_  // guard

#include "verilated.h"
#include "svdpi.h"

class VVortex__Syms;
class VVortex___024root;
class VVortex_VX_commit_if;
class VVortex_VX_decode_if;
class VVortex_VX_execute_if__N4;
class VVortex_VX_fetch_if;
class VVortex_VX_ibuffer_if;
class VVortex_VX_lsu_mem_if__D10_T3;
class VVortex_VX_lsu_mem_if__N4_D4_T2;
class VVortex_VX_mem_bus_if__D10_T3;
class VVortex_VX_mem_bus_if__D40_T4;
class VVortex_VX_mem_bus_if__D40_T6;
class VVortex_VX_mem_bus_if__D40_T7;
class VVortex_VX_mem_bus_if__D40_T8;
class VVortex_VX_mem_bus_if__D4_T2;
class VVortex_VX_mem_bus_if__D4_T3;
class VVortex_VX_operands_if;
class VVortex_VX_schedule_if;
class VVortex_VX_scoreboard_if;
class VVortex_VX_trace_pkg;
class VVortex_VX_warp_ctl_if;
class VVortex_VX_writeback_if;
class VVortex___024unit;


// This class is the main interface to the Verilated model
class alignas(VL_CACHE_LINE_BYTES) VVortex VL_NOT_FINAL : public VerilatedModel {
  private:
    // Symbol table holding complete model state (owned by this class)
    VVortex__Syms* const vlSymsp;

  public:

    // CONSTEXPR CAPABILITIES
    // Verilated with --trace?
    static constexpr bool traceCapable = false;

    // PORTS
    // The application code writes and reads these signals to
    // propagate new values into/out from the Verilated model.
    VL_IN8(&clk,0,0);
    VL_IN8(&reset,0,0);
    VL_OUT8(&mem_req_valid,0,0);
    VL_OUT8(&mem_req_rw,0,0);
    VL_OUT8(&mem_req_tag,7,0);
    VL_IN8(&mem_req_ready,0,0);
    VL_IN8(&mem_rsp_valid,0,0);
    VL_IN8(&mem_rsp_tag,7,0);
    VL_OUT8(&mem_rsp_ready,0,0);
    VL_IN8(&dcr_wr_valid,0,0);
    VL_OUT8(&busy,0,0);
    VL_IN16(&dcr_wr_addr,11,0);
    VL_OUT(&mem_req_addr,25,0);
    VL_OUTW(&mem_req_data,511,0,16);
    VL_INW(&mem_rsp_data,511,0,16);
    VL_IN(&dcr_wr_data,31,0);
    VL_OUT64(&mem_req_byteen,63,0);

    // CELLS
    // Public to allow access to /* verilator public */ items.
    // Otherwise the application code can consider these internals.
    VVortex___024unit* const __PVT____024unit;
    VVortex_VX_trace_pkg* const __PVT__VX_trace_pkg;
    VVortex_VX_mem_bus_if__D40_T8* const __PVT__Vortex__DOT__per_cluster_mem_bus_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D40_T8* const __PVT__Vortex__DOT__mem_bus_if;
    VVortex_VX_mem_bus_if__D40_T8* const __PVT__Vortex__DOT__l3cache__DOT__core_bus_cache_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D40_T4* const __PVT__Vortex__DOT__l3cache__DOT__mem_bus_cache_if;
    VVortex_VX_mem_bus_if__D40_T8* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__per_socket_mem_bus_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D40_T8* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__l2cache__DOT__core_bus_cache_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D40_T4* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__l2cache__DOT__mem_bus_cache_if;
    VVortex_VX_mem_bus_if__D4_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__per_core_icache_bus_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D40_T4* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__icache_mem_bus_if;
    VVortex_VX_mem_bus_if__D10_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__per_core_dcache_bus_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D40_T7* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__dcache_mem_bus_if;
    VVortex_VX_mem_bus_if__D40_T7* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__l1_mem_bus_if__BRA__1__KET__;
    VVortex_VX_mem_bus_if__D40_T7* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__l1_mem_bus_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D40_T8* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__l1_mem_arb_bus_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D40_T4* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__icache__DOT__cache_mem_bus_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D4_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__icache__DOT__arb_core_bus_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D40_T4* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__icache__DOT__mem_bus_tmp_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D4_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__icache__DOT__genblk2__BRA__0__KET____DOT__core_bus_tmp_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D4_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__icache__DOT__genblk2__BRA__0__KET____DOT__arb_core_bus_tmp_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D4_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__icache__DOT__caches__BRA__0__KET____DOT__cache_wrap__DOT__core_bus_cache_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D40_T4* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__icache__DOT__caches__BRA__0__KET____DOT__cache_wrap__DOT__mem_bus_cache_if;
    VVortex_VX_mem_bus_if__D4_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__icache__DOT__caches__BRA__0__KET____DOT__cache_wrap__DOT__genblk3__DOT__cache__DOT__core_bus2_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D40_T7* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__dcache__DOT__cache_mem_bus_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D10_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__dcache__DOT__arb_core_bus_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D40_T7* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__dcache__DOT__mem_bus_tmp_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D10_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__dcache__DOT__genblk2__BRA__0__KET____DOT__core_bus_tmp_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D10_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__dcache__DOT__genblk2__BRA__0__KET____DOT__arb_core_bus_tmp_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D10_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__dcache__DOT__caches__BRA__0__KET____DOT__cache_wrap__DOT__core_bus_cache_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D40_T6* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__dcache__DOT__caches__BRA__0__KET____DOT__cache_wrap__DOT__mem_bus_cache_if;
    VVortex_VX_mem_bus_if__D10_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__dcache__DOT__caches__BRA__0__KET____DOT__cache_wrap__DOT__genblk3__DOT__cache__DOT__core_bus2_if__BRA__0__KET__;
    VVortex_VX_schedule_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__schedule_if;
    VVortex_VX_fetch_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__fetch_if;
    VVortex_VX_decode_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__decode_if;
    VVortex_VX_warp_ctl_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__warp_ctl_if;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__commit_if__BRA__3__KET__;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__commit_if__BRA__2__KET__;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__commit_if__BRA__1__KET__;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__commit_if__BRA__0__KET__;
    VVortex_VX_writeback_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__writeback_if__BRA__0__KET__;
    VVortex_VX_lsu_mem_if__N4_D4_T2* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__lsu_mem_if__BRA__0__KET__;
    VVortex_VX_lsu_mem_if__N4_D4_T2* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__lsu_dcache_if__BRA__0__KET__;
    VVortex_VX_lsu_mem_if__D10_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__genblk1__BRA__0__KET____DOT__dcache_coalesced_if;
    VVortex_VX_mem_bus_if__D10_T3* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__genblk1__BRA__0__KET____DOT__dcache_bus_tmp_if__BRA__0__KET__;
    VVortex_VX_decode_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__issue__DOT__issue_slices__BRA__0__KET____DOT__per_issue_decode_if;
    VVortex_VX_ibuffer_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__issue__DOT__issue_slices__BRA__0__KET____DOT__issue_slice__DOT__ibuffer_if__BRA__3__KET__;
    VVortex_VX_ibuffer_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__issue__DOT__issue_slices__BRA__0__KET____DOT__issue_slice__DOT__ibuffer_if__BRA__2__KET__;
    VVortex_VX_ibuffer_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__issue__DOT__issue_slices__BRA__0__KET____DOT__issue_slice__DOT__ibuffer_if__BRA__1__KET__;
    VVortex_VX_ibuffer_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__issue__DOT__issue_slices__BRA__0__KET____DOT__issue_slice__DOT__ibuffer_if__BRA__0__KET__;
    VVortex_VX_scoreboard_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__issue__DOT__issue_slices__BRA__0__KET____DOT__issue_slice__DOT__scoreboard_if;
    VVortex_VX_operands_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__issue__DOT__issue_slices__BRA__0__KET____DOT__issue_slice__DOT__operands_if;
    VVortex_VX_ibuffer_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__issue__DOT__issue_slices__BRA__0__KET____DOT__issue_slice__DOT__scoreboard__DOT__staging_if__BRA__3__KET__;
    VVortex_VX_ibuffer_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__issue__DOT__issue_slices__BRA__0__KET____DOT__issue_slice__DOT__scoreboard__DOT__staging_if__BRA__2__KET__;
    VVortex_VX_ibuffer_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__issue__DOT__issue_slices__BRA__0__KET____DOT__issue_slice__DOT__scoreboard__DOT__staging_if__BRA__1__KET__;
    VVortex_VX_ibuffer_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__issue__DOT__issue_slices__BRA__0__KET____DOT__issue_slice__DOT__scoreboard__DOT__staging_if__BRA__0__KET__;
    VVortex_VX_execute_if__N4* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__alu_unit__DOT__per_block_execute_if__BRA__0__KET__;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__alu_unit__DOT__per_block_commit_if__BRA__0__KET__;
    VVortex_VX_execute_if__N4* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__alu_unit__DOT__genblk1__BRA__0__KET____DOT__int_execute_if;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__alu_unit__DOT__genblk1__BRA__0__KET____DOT__int_commit_if;
    VVortex_VX_execute_if__N4* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__alu_unit__DOT__genblk1__BRA__0__KET____DOT__muldiv_execute_if;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__alu_unit__DOT__genblk1__BRA__0__KET____DOT__muldiv_commit_if;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__alu_unit__DOT__gather_unit__DOT__genblk5__BRA__0__KET____DOT__commit_tmp_if;
    VVortex_VX_execute_if__N4* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__lsu_unit__DOT__per_block_execute_if__BRA__0__KET__;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__lsu_unit__DOT__per_block_commit_if__BRA__0__KET__;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__lsu_unit__DOT__gather_unit__DOT__genblk5__BRA__0__KET____DOT__commit_tmp_if;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__lsu_unit__DOT__lsu_slices__BRA__0__KET____DOT__lsu_slice__DOT__commit_rsp_if;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__lsu_unit__DOT__lsu_slices__BRA__0__KET____DOT__lsu_slice__DOT__commit_no_rsp_if;
    VVortex_VX_execute_if__N4* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__fpu_unit__DOT__per_block_execute_if__BRA__0__KET__;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__fpu_unit__DOT__per_block_commit_if__BRA__0__KET__;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__fpu_unit__DOT__gather_unit__DOT__genblk5__BRA__0__KET____DOT__commit_tmp_if;
    VVortex_VX_execute_if__N4* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__sfu_unit__DOT__per_block_execute_if__BRA__0__KET__;
    VVortex_VX_execute_if__N4* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__sfu_unit__DOT__wctl_execute_if;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__sfu_unit__DOT__wctl_commit_if;
    VVortex_VX_execute_if__N4* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__sfu_unit__DOT__csr_execute_if;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__sfu_unit__DOT__csr_commit_if;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__sfu_unit__DOT__arb_commit_if__BRA__0__KET__;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__execute__DOT__sfu_unit__DOT__gather_unit__DOT__genblk5__BRA__0__KET____DOT__commit_tmp_if;
    VVortex_VX_commit_if* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__commit__DOT__commit_arb_if__BRA__0__KET__;
    VVortex_VX_lsu_mem_if__N4_D4_T2* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__lmem_unit__DOT__lsu_switch_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D4_T2* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__lmem_unit__DOT__lmem_bus_if__BRA__3__KET__;
    VVortex_VX_mem_bus_if__D4_T2* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__lmem_unit__DOT__lmem_bus_if__BRA__2__KET__;
    VVortex_VX_mem_bus_if__D4_T2* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__lmem_unit__DOT__lmem_bus_if__BRA__1__KET__;
    VVortex_VX_mem_bus_if__D4_T2* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__lmem_unit__DOT__lmem_bus_if__BRA__0__KET__;
    VVortex_VX_mem_bus_if__D4_T2* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__lmem_unit__DOT__genblk4__BRA__0__KET____DOT__lmem_bus_tmp_if__BRA__3__KET__;
    VVortex_VX_mem_bus_if__D4_T2* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__lmem_unit__DOT__genblk4__BRA__0__KET____DOT__lmem_bus_tmp_if__BRA__2__KET__;
    VVortex_VX_mem_bus_if__D4_T2* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__lmem_unit__DOT__genblk4__BRA__0__KET____DOT__lmem_bus_tmp_if__BRA__1__KET__;
    VVortex_VX_mem_bus_if__D4_T2* const __PVT__Vortex__DOT__clusters__BRA__0__KET____DOT__cluster__DOT__sockets__BRA__0__KET____DOT__socket__DOT__cores__BRA__0__KET____DOT__core__DOT__lmem_unit__DOT__genblk4__BRA__0__KET____DOT__lmem_bus_tmp_if__BRA__0__KET__;

    // Root instance pointer to allow access to model internals,
    // including inlined /* verilator public_flat_* */ items.
    VVortex___024root* const rootp;

    // CONSTRUCTORS
    /// Construct the model; called by application code
    /// If contextp is null, then the model will use the default global context
    /// If name is "", then makes a wrapper with a
    /// single model invisible with respect to DPI scope names.
    explicit VVortex(VerilatedContext* contextp, const char* name = "TOP");
    explicit VVortex(const char* name = "TOP");
    /// Destroy the model; called (often implicitly) by application code
    virtual ~VVortex();
  private:
    VL_UNCOPYABLE(VVortex);  ///< Copying not allowed

  public:
    // API METHODS
    /// Evaluate the model.  Application must call when inputs change.
    void eval() { eval_step(); }
    /// Evaluate when calling multiple units/models per time step.
    void eval_step();
    /// Evaluate at end of a timestep for tracing, when using eval_step().
    /// Application must call after all eval() and before time changes.
    void eval_end_step() {}
    /// Simulation complete, run final blocks.  Application must call on completion.
    void final();
    /// Are there scheduled events to handle?
    bool eventsPending();
    /// Returns time at next time slot. Aborts if !eventsPending()
    uint64_t nextTimeSlot();
    /// Trace signals in the model; called by application code
    void trace(VerilatedTraceBaseC* tfp, int levels, int options = 0) { contextp()->trace(tfp, levels, options); }
    /// Retrieve name of this model instance (as passed to constructor).
    const char* name() const;

    // Abstract methods from VerilatedModel
    const char* hierName() const override final;
    const char* modelName() const override final;
    unsigned threads() const override final;
    /// Prepare for cloning the model at the process level (e.g. fork in Linux)
    /// Release necessary resources. Called before cloning.
    void prepareClone() const;
    /// Re-init after cloning the model at the process level (e.g. fork in Linux)
    /// Re-allocate necessary resources. Called after cloning.
    void atClone() const;
  private:
    // Internal functions - trace registration
    void traceBaseModel(VerilatedTraceBaseC* tfp, int levels, int options);
};

#endif  // guard
